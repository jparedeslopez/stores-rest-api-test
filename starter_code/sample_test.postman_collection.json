{
	"info": {
		"_postman_id": "c6b4c618-ac1f-40ae-acb6-a42f8584dca2",
		"name": "New collection for PyCharm",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Register and Authenticate Copy",
			"description": "",
			"item": [
				{
					"name": "/register Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d33222e-4eb9-4791-805e-882f66754c49",
								"type": "text/javascript",
								"exec": [
									"postman.clearEnvironmentVariable(\"access_token\");",
									"",
									"tests[\"Respone time is less than 200ms\"] = responseTime < 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"User Created Succesfully\"] = jsonData.message === 'User created successfully';",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader('Content-Type');",
									"",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"javierr442313123132123adsda\",\n\t\"password\": \"1234\"\n\t\n}"
						},
						"url": "{{url}}/register"
					},
					"response": []
				},
				{
					"name": "/auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee12cb4a-8dc5-4521-84f3-472acd30f418",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"postman.setEnvironmentVariable('access_token', jsonData.access_token)",
									"",
									"tests[\"Status Code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains an caccess token\"] = jsonData.message = \"access_token\"",
									"",
									"tests[\"Response Time is under 200ms\"] = responseTime < 200"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWS"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"javierr442313123132123adsda\",\n\t\"password\": \"1234\"\n}"
						},
						"url": "{{url}}/auth"
					},
					"response": []
				},
				{
					"name": "/stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0559142f-cf93-4209-82f4-928064f99583",
								"type": "text/javascript",
								"exec": [
									"tests[\"Response Time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present in the response\"] = postman.getResponseHeader('Content-Type');",
									"",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json';",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Store list is empty\"] = jsonData.stores.length === 0;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": "{{url}}/stores"
					},
					"response": []
				},
				{
					"name": "/store/test_store14",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05f972f2-7864-4431-834f-e27beaa43738",
								"type": "text/javascript",
								"exec": [
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content Type is there\"] = postman.getResponseHeader('Content-Type') === \"application/json\";",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Store succesfully created\"] = jsonData.name = \"test_store14\"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/store/test_store14"
					},
					"response": []
				},
				{
					"name": "{{url}}/store/test_store14",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38b44c0c-3be5-4a8b-96c9-fe2befef81ee",
								"type": "text/javascript",
								"exec": [
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader('Content-Type') === 'application/json';",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"The store was succesfully removed\"] = jsonData.message === 'Store deleted'",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": "{{url}}/store/test_store14"
					},
					"response": []
				}
			]
		}
	]
}